{"ast":null,"code":"var _jsxFileName = \"/Users/Home/Documents/GitHub/ReserveIt/client/src/user/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [isLoggedIn, setLoggedIn] = useState(false);\n\n//   const login = () => {\n//     setLoggedIn(true);\n//   };\n\n//   const logout = () => {\n//     setLoggedIn(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export const useAuth = () => {\n//   return useContext(AuthContext);\n// };\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  useEffect(() => {\n    // Check if the user is logged in from local storage\n    const storedLoggedInStatus = localStorage.getItem('isLoggedIn');\n    if (storedLoggedInStatus === 'true') {\n      setLoggedIn(true);\n    }\n  }, []); // Empty dependency array ensures this effect runs only once on component mount\n\n  const login = () => {\n    setLoggedIn(true);\n    localStorage.setItem('isLoggedIn', 'true');\n  };\n  const logout = () => {\n    setLoggedIn(false);\n    localStorage.removeItem('isLoggedIn');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"LCpfS0X6AUJI1DI4sDB5o/oXtdQ=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setLoggedIn","storedLoggedInStatus","localStorage","getItem","login","setItem","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/Home/Documents/GitHub/ReserveIt/client/src/user/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState } from 'react';\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [isLoggedIn, setLoggedIn] = useState(false);\n\n//   const login = () => {\n//     setLoggedIn(true);\n//   };\n\n//   const logout = () => {\n//     setLoggedIn(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export const useAuth = () => {\n//   return useContext(AuthContext);\n// };\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setLoggedIn] = useState(false);\n\n  useEffect(() => {\n    // Check if the user is logged in from local storage\n    const storedLoggedInStatus = localStorage.getItem('isLoggedIn');\n    if (storedLoggedInStatus === 'true') {\n      setLoggedIn(true);\n    }\n  }, []); // Empty dependency array ensures this effect runs only once on component mount\n\n  const login = () => {\n    setLoggedIn(true);\n    localStorage.setItem('isLoggedIn', 'true');\n  };\n\n  const logout = () => {\n    setLoggedIn(false);\n    localStorage.removeItem('isLoggedIn');\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":";;;AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAC/D,IAAIF,oBAAoB,KAAK,MAAM,EAAE;MACnCD,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMI,KAAK,GAAGA,CAAA,KAAM;IAClBJ,WAAW,CAAC,IAAI,CAAC;IACjBE,YAAY,CAACG,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;EAC5C,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBN,WAAW,CAAC,KAAK,CAAC;IAClBE,YAAY,CAACK,UAAU,CAAC,YAAY,CAAC;EACvC,CAAC;EAED,oBACEb,OAAA,CAACC,WAAW,CAACa,QAAQ;IAACC,KAAK,EAAE;MAAEV,UAAU;MAAEK,KAAK;MAAEE;IAAO,CAAE;IAAAT,QAAA,EACxDA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACf,EAAA,CA1BWF,YAAY;AAAAkB,EAAA,GAAZlB,YAAY;AA4BzB,OAAO,MAAMmB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAO1B,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAACqB,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}